fil
fil
path
fil[0]
fil[1]
fil
source('~/.active-rstudio-document', echo=TRUE)
path
fil[0]
fil[1]
path+fil[1]
paste(path+fil[1])
paste(path,fil[1])
for (i in fil)(print i)
for (i in fil){ print i}
for (i in fil){i}
fil
paste(c('foo', fil))
paste(c('foo', fil), collapse=" ")
paste(c('foo', fil), collapse=" ")
paste(c('foo', fil), collapse="")
paste(c(path, fil), collapse="")
paste(c(path, fil), collapse=" ")
for (i in fil){paste(c(path, fil[i]))}
fil
x<-for (i in fil){paste(c(path, fil[i]))}
x
x<-for (i in 10){paste(c(path, fil[i]))}
x
for (i in length(fil)){paste(c(path, fil[i]))}
fil
a=for (i in length(fil)){paste(c(path, fil[i]))}
a
paste('foo', fil)
paste(path, fil, collapse)
paste(path, fil, collapse='')
paste(path, fil)
paste(path, fil, sep='')
paste(path, fil, sep='')
drkfil
paste(path, drkfil, sep='')
drkfil
drkfil=paste(path, drkfil, sep='')
drkfil
length(drkfil)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#replace PATH TO DIRECTORY HERE (INCLUDE TRAIL "/")
path="../../Datafiles/Fiber1/NPSAM/"
#replace NUMBER OF LAST DATA FILE HERE
efile=NULL
bfile=0
darkpattern="dark"
library(stringr)
#Normalize path; add trailing "/"
path = normalizePath(path)
if (str_sub(path, -1,-1)!="/") path=str_c(path, "/")
#If more than one darkfile exist an error will alert the user
drkfil=list.files(path, pattern=darkpattern)
if(length(drkfil) != 1)
stop('zero or multiple dark files found')
drkfil=paste(path, fil, sep='')
# Read in all files (including dark)
fil=list.files(path, pattern="")
fil=paste(path, fil, sep='')
# Find index of dark file
drkindex = grep(darkpattern, fil)
# REplace with NA
fil[[drkindex]]<-NA
# Remove all instances of NA
fil <- fil[!is.na(fil)]
# DEFINE REF FILE AS 0 VALUE IN LIST
reffil <- fil[1]
#fil = fil[2:length(fil)]
#If efile NULL; set it to number of files in dataset
if(is.null(efile)){
efile=length(fil)
}
#Convert efile to int
efile=as.integer(efile)
#If efile is larger length fil, error
if(length(efile)>length(fil))
stop('length(efile) cannot exceed length(fil)')
nfile=efile-bfile+1
lammin<-"440"
lammax<-"680"
noise<-(1:5)
# create array of filenames
ndex=c(bfile:efile)
ndex=formatC(ndex,width=5,format="d",flag="0")
#fil=paste(path,root,ndex,suffix,sep="")
#CHANGE THE START AND END INDICES TO DEFINE THE WAVELENGTH RANGE BETWEEN 440 and 680 nm
dark<-read.table(paste(path,drkfil,sep=""), sep="\t", skip=18,nrows=2047)
ref<-read.table(paste(path,reffil,sep=""), sep="\t", skip=18,nrows=2047)
refback<-ref
refback[,2]<-ref[,2]-dark[,2]
wavelength=refback[,1]
# x=1-refback[,2]/refback[,2]   delete this later
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dark<-read.table(drkfil, sep="\t", skip=18,nrows=2047)
drkfil
drkfil
source('~/.active-rstudio-document', echo=TRUE)
#replace PATH TO DIRECTORY HERE (INCLUDE TRAIL "/")
path="../../Datafiles/Fiber1/NPSAM/"
#replace NUMBER OF LAST DATA FILE HERE
efile=NULL
bfile=0
darkpattern="dark"
#replace PATH TO DIRECTORY HERE (INCLUDE TRAIL "/")
path="../../Datafiles/Fiber1/NPSAM/"
#replace NUMBER OF LAST DATA FILE HERE
efile=NULL
bfile=0
darkpattern="dark"
library(stringr)
#Normalize path; add trailing "/"
path = normalizePath(path)
if (str_sub(path, -1,-1)!="/") path=str_c(path, "/")
#If more than one darkfile exist an error will alert the user
drkfil=list.files(path, pattern=darkpattern)
drkfil=paste(path, drkfil, sep='')
if(length(drkfil) != 1)
stop('zero or multiple dark files found')
# Read in all files (including dark)
# FIL IS DATAFILES (BAD NAMING CONVENTION)
fil=list.files(path, pattern="")
fil=paste(path, fil, sep='')
# Find index of dark file
drkindex = grep(darkpattern, fil)
# REplace with NA
fil[[drkindex]]<-NA
# Remove all instances of NA
fil <- fil[!is.na(fil)]
# DEFINE REF FILE AS 0 VALUE IN LIST
reffil <- fil[1]
fil = fil[2:length(fil)]
#If efile NULL; set it to number of files in dataset
if(is.null(efile)){
efile=length(fil)
}
#Convert efile to int
efile=as.integer(efile)
#If efile is larger length fil, error
if(length(efile)>length(fil))
stop('length(efile) cannot exceed length(fil)')
nfile=efile-bfile+1
lammin<-"440"
lammax<-"680"
noise<-(1:5)
# create array of filenames
ndex=c(bfile:efile)
ndex=formatC(ndex,width=5,format="d",flag="0")
#CHANGE THE START AND END INDICES TO DEFINE THE WAVELENGTH RANGE BETWEEN 440 and 680 nm
dark<-read.table(drkfil, sep="\t", skip=18,nrows=2047)
ref<-read.table(reffil, sep="\t", skip=18,nrows=2047)
refback<-ref
refback[,2]<-ref[,2]-dark[,2]
wavelength=refback[,1]
# x=1-refback[,2]/refback[,2]   delete this later
#Build a dummy data frame to hold the spectral data. Creating a blank one
#saves run time over using cbind() to build the dataframe column by column
#Notice here that each time the while loop executes, the data frame doubles
#in size. That means instead of evoking cbind nfiles times, it is invoked a
#few more than N times, where 2^N = nfiles
#reset rest (contains the number left over from nfile - 2^N)+2 to include dark, reference data.
rest=nfile+2
#make the dummy filled with dark values ... will be useful later
ssp=data.frame(dark[,2])
#keep ssp a single column long, dark data are accumulated in the data frame,
#spect
spect=ssp
#check that remainder, nfile - 2^N, is greater than 2
while(rest>2){
sl=ssp # setup 1-dim dataframe
# execute n times
n=as.integer(log(rest)/log(2))
rest=rest-2^n # how many columns are left to be filled?
for(i in 1:n){sl=cbind(sl,sl)} #fill columns in data frame
spect=cbind(spect,sl) # add in the newly created data frame columns
}
#Check if nfile is even, if so, add one more column
if(as.integer(nfile/2)==nfile/2){spect=cbind(spect,ssp)}
# all done. This data frame can be copied and then filled as the data are
# read from the spectrometer files. Creating and filling saves processor time
# over individually appending a new column to the data frame for each data set
rownames(spect)=dark[,1] # assign row names to wavelength values in nm
# Assign first two column names
colnames(spect)[1]="Dark"
colnames(spect)[2]="Ref."
spect[,2]=ref[,2]  # store reference spectrum to column 2
#trim spect to remove any extra columns
#spect=spect[,1:nfile+3]
options(width=60)
#read the first 18 lines as header, then write to file
# read and store file descriptor from SpectraSuite
test=readLines(paste(fil[1],sep=""),n=17)
# set template for time conversion
w <- matrix(c(3600,60,1),ncol=1)
# Read and convert time stamp from the first spectrum file
time=scan(fil[1],what="character",nmax=5,nlines=18,skip=2)
t0=matrix(as.numeric(unlist(strsplit(time[5],":"))),ncol=3,byrow=TRUE)%*%w
#Get the remaining time stamps. The elapsed times will be the row headers in the data frame
for(i in 1:nfile){
# Read and convert time stamp
time=scan(fil[(i)],what="character",nmax=5,nlines=18,skip=2)
tc=matrix(as.numeric(unlist(strsplit(time[5],":"))),ncol=3,byrow=TRUE)%*%w-t0
colnames(spect)[i+2]=tc
}
# trim any excess columns
spect=spect[,1:(nfile+2)]
darkpattern="dark"
#replace PATH TO DIRECTORY HERE (INCLUDE TRAIL "/")
path="../../Datafiles/Fiber1/NPSAM/"
#replace NUMBER OF LAST DATA FILE HERE
efile=NULL
bfile=0
darkpattern="dark"
library(stringr)
#Normalize path; add trailing "/"
path = normalizePath(path)
if (str_sub(path, -1,-1)!="/") path=str_c(path, "/")
#If more than one darkfile exist an error will alert the user
drkfil=list.files(path, pattern=darkpattern)
drkfil=paste(path, drkfil, sep='')
if(length(drkfil) != 1)
stop('zero or multiple dark files found')
# Read in all files (including dark)
# FIL IS DATAFILES (BAD NAMING CONVENTION)
fil=list.files(path, pattern="")
fil=paste(path, fil, sep='')
# Find index of dark file
drkindex = grep(darkpattern, fil)
# REplace with NA
fil[[drkindex]]<-NA
# Remove all instances of NA
fil <- fil[!is.na(fil)]
# DEFINE REF FILE AS 0 VALUE IN LIST
reffil <- fil[1]
fil = fil[2:length(fil)]
#If efile NULL; set it to number of files in dataset
if(is.null(efile)){
efile=length(fil)
}
#Convert efile to int
efile=as.integer(efile)
#If efile is larger length fil, error
if(length(efile)>length(fil))
stop('length(efile) cannot exceed length(fil)')
nfile=efile-bfile+1
options(width=60)
# Now calculate and store the dark-corrected spectra.
dark=spect[,1]
spect=spect-dark
spect[,1]=dark
spect=signif(spect,5)
write.table(spect, file = paste('./CSV_Files/',"DarkCorrData.csv",sep=""),sep=",",col.names=NA)  # store data frame
library(Bolstad2)
options(width=60)
# Get integers for setting xlabels on plots
specmin=as.integer(lammin)
specmax=as.integer(lammax)
#Plot the processed dataframe
plot(spect[,3]~wavelength,cex.main=2.5,cex.axis=2.5,cex.lab=2.5, main="(a) Raw Spectra",xlab="wavelength (nm)",ylab="Intensity",xlim=c(specmin,specmax), ylim=c(0,max(spect[,3:(2+nfile)])), type="l")
cl<-rainbow(1.1*nfile)
# integrate the spectral density plot for the reference data
spectralpower=sintegral(wavelength,spect[,2])$int
for(i in 1:nfile){
lines(spect[,(2+i)]~wavelength, lty = 1, col = cl[i+1])
# integrate each successive spectral density plot
spectralpower=c(spectralpower,sintegral(wavelength,spect[,(i+2)])$int)
}
options(width=60)
plot(spectralpower[2:(nfile+1)]~as.numeric(colnames(spect[,3:(nfile+2)])),cex.main=2.5,cex.axis=2.5,cex.lab=2.5, main="(b) Raw Spectral Power",xlab="Time (s)", ylab="")
drkfil="dark_84_30_10.txt"
#replace PATH TO DIRECTORY HERE (INCLUDE TRAIL "/")
path="../../Datafiles/Fiber1/Ethanol_rinse/"
#replace DARK FILE NAME HERE
drkfil="dark_84_30_10.txt"
#replace ref FILE NAME HERE (sometimes is file #0, often times not)
reffil="f1_eth00000.txt"
#replace ROOT HERE
root="f1_eth"
#replace suffix here
suffix=".txt"
#replace NUMBER OF FIRST DATA FILE HERE
bfile=0
#replace NUMBER OF LAST DATA FILE HERE
efile=189
nfile=efile-bfile+1
lammin<-"440"
lammax<-"680"
noise<-(1:5)
# create array of filenames
ndex=c(bfile:efile)
ndex=formatC(ndex,width=5,format="d",flag="0")
fil=paste(path,root,ndex,suffix,sep="")
#CHANGE THE START AND END INDICES TO DEFINE THE WAVELENGTH RANGE BETWEEN 440 and 680 nm
dark<-read.table(paste(path,drkfil,sep=""), sep="\t", skip=18,nrows=2047)
ref<-read.table(paste(path,reffil,sep=""), sep="\t", skip=18,nrows=2047)
refback<-ref
refback[,2]<-ref[,2]-dark[,2]
wavelength=refback[,1]
# x=1-refback[,2]/refback[,2]   delete this later
fil
nfile
#replace PATH TO DIRECTORY HERE (INCLUDE TRAIL "/")
drkfil=list.files(path, pattern=darkpattern)
nfile
#replace PATH TO DIRECTORY HERE (INCLUDE TRAIL "/")
path="../../Datafiles/Fiber1/NPSAM/"
#replace NUMBER OF LAST DATA FILE HERE
efile=NULL
bfile=0
darkpattern="dark"
library(stringr)
#Normalize path; add trailing "/"
path = normalizePath(path)
if (str_sub(path, -1,-1)!="/") path=str_c(path, "/")
#If more than one darkfile exist an error will alert the user
drkfil=list.files(path, pattern=darkpattern)
drkfil=paste(path, drkfil, sep='')
if(length(drkfil) != 1)
stop('zero or multiple dark files found')
# Read in all files (including dark)
# FIL IS DATAFILES (BAD NAMING CONVENTION)
fil=list.files(path, pattern="")
fil=paste(path, fil, sep='')
# Find index of dark file
drkindex = grep(darkpattern, fil)
# REplace with NA
fil[[drkindex]]<-NA
# Remove all instances of NA
fil <- fil[!is.na(fil)]
# DEFINE REF FILE AS 0 VALUE IN LIST
reffil <- fil[1]
#fil = fil[2:length(fil)]
#If efile NULL; set it to number of files in dataset
if(is.null(efile)){
efile=length(fil)
}
#Convert efile to int
efile=as.integer(efile)
#If efile is larger length fil, error
if(length(efile)>length(fil))
stop('length(efile) cannot exceed length(fil)')
nfile=efile-bfile+1
nfile
fil
nfile
source('~/.active-rstudio-document', echo=TRUE)
path
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#replace PATH TO DIRECTORY
path='../../Datafiles/Fiber1/NPSAM'
#replace NUMBER OF LAST DATA FILE HERE
bfile=0
efile=NULL
darkpattern="dark"
# Starting/Ending wavelength
lammin<-440
lammax<-680
noise<-(2:6) #First five curves, excluding reference
library(stringr)
#Normalize path; add trailing "/"
path = normalizePath(path)
if (str_sub(path, -1,-1)!="/") path=str_c(path, "/")
#If more than one darkfile exist an error will alert the user
drkfil=list.files(path, pattern=darkpattern)
drkfil=paste(path, drkfil, sep='')
if(length(drkfil) != 1)
stop('zero or multiple dark files found')
# Read in all files (including dark)
# FIL IS DATAFILES
datafiles=list.files(path, pattern="")
datafiles=paste(path, datafiles, sep='')
# Find index of dark file
drkindex = grep(darkpattern, datafiles)
# REplace with NA
datafiles[[drkindex]]<-NA
# Remove all instances of NA
datafiles <- datafiles[!is.na(datafiles)]
# DEFINE REF FILE AS 0 VALUE IN LIST
reffil <- datafiles[1]
datafiles = datafiles[2:length(datafiles)]
#If efile NULL; set it to number of files in dataset
if(is.null(efile)){
efile=length(datafiles)
}
#Convert efile to int
efile=as.integer(efile)
#If efile is larger length fdatafilesil, error
if(length(efile)>length(datafiles))
stop('length(efile) cannot exceed length(datafiles)')
nfile=efile-bfile
nfile
datafiles
# create array of filenames
ndex=c(bfile:efile)
ndex=formatC(ndex,width=5,format="d",flag="0")
datafiles=paste(path,root,ndex,suffix,sep="")
#CHANGE THE START AND END INDICES TO DEFINE THE WAVELENGTH RANGE BETWEEN 440 and 680 nm
dark<-read.table(paste(path,drkfil,sep=""), sep="\t", skip=18,nrows=2047)
ref<-read.table(paste(path,reffil,sep=""), sep="\t", skip=18,nrows=2047)
refback<-ref
refback[,2]<-ref[,2]-dark[,2]
wavelength=refback[,1]
# x=1-refback[,2]/refback[,2]   delete this later
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(stringr)
#Normalize path; add trailing "/"
path = normalizePath(path)
if (str_sub(path, -1,-1)!="/") path=str_c(path, "/")
#If more than one darkfile exist an error will alert the user
drkfil=list.files(path, pattern=darkpattern)
drkfil=paste(path, drkfil, sep='')
if(length(drkfil) != 1)
stop('zero or multiple dark files found')
# Read in all files (including dark)
# FIL IS DATAFILES
datafiles=list.files(path, pattern="")
datafiles=paste(path, datafiles, sep='')
# Find index of dark file
drkindex = grep(darkpattern, datafiles)
# REplace with NA
datafiles[[drkindex]]<-NA
# Remove all instances of NA
datafiles <- datafiles[!is.na(datafiles)]
# DEFINE REF FILE AS 0 VALUE IN LIST
reffil <- datafiles[1]
datafiles = datafiles[2:length(datafiles)]
#If efile NULL; set it to number of files in dataset
if(is.null(efile)){
efile=length(datafiles)
}
#Convert efile to int
efile=as.integer(efile)
#If efile is larger length fdatafilesil, error
if(length(efile)>length(datafiles))
stop('length(efile) cannot exceed length(datafiles)')
nfile=efile-bfile
drfil
drkfil
len(drkfil)
length(drkfil)
library(stringr)
#Normalize path; add trailing "/"
path = normalizePath(path)
if (str_sub(path, -1,-1)!="/") path=str_c(path, "/")
#If more than one darkfile exist an error will alert the user
drkfil=list.files(path, pattern=darkpattern)
drkfil=paste(path, drkfil, sep='')
if(length(drkfil) != 1)
stop('zero or multiple dark files found')
# Read in all files (including dark)
# FIL IS DATAFILES
datafiles=list.files(path, pattern="")
datafiles=paste(path, datafiles, sep='')
# Find index of dark file
drkindex = grep(darkpattern, datafiles)
# REplace with NA
datafiles[[drkindex]]<-NA
# Remove all instances of NA
datafiles <- datafiles[!is.na(datafiles)]
# DEFINE REF FILE AS 0 VALUE IN LIST
reffil <- datafiles[1]
datafiles = datafiles[2:length(datafiles)]
#If efile NULL; set it to number of files in dataset
if(is.null(efile)){
efile=length(datafiles)
}
#Convert efile to int
efile=as.integer(efile)
#If efile is larger length fdatafilesil, error
if(length(efile)>length(datafiles))
stop('length(efile) cannot exceed length(datafiles)')
nfile=efile-bfile
drkfile
drkfil
source('~/.active-rstudio-document', echo=TRUE)
drkfil
path
list.files(path, pattern='dark')
list.files(path)
source('~/.active-rstudio-document', echo=TRUE)
path
getwd
getwd()
setwd('.')
setwd("/media/backup/Dropbox/FiberData/TexTemplates/Report/sweavesections")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
drkfil
path='../../Datafiles/Fiber1/'
source('~/.active-rstudio-document', echo=TRUE)
drkfil
datafiles
path
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
